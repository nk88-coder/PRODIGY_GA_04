# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xPuZvEioi8dcNJzkzHQu8TrBdNhP4xwD
"""

!pip install diffusers transformers accelerate safetensors

from google.colab import files
import zipfile
import os

# ⬆️ Upload zip file manually
uploaded = files.upload()  # browse and select zip

# 📦 Unzip it
for filename in uploaded.keys():
    with zipfile.ZipFile(filename, 'r') as zip_ref:
        zip_ref.extractall("/content/pix2pix_data")  # destination folder

print("✅ Extracted to /content/pix2pix_data")

import torch

# Batch of 4, 3-channel, 256x256 fake "input" images
input_images = torch.randn(4, 3, 256, 256)   # simulates input sketch/etc.
target_images = torch.randn(4, 3, 256, 256)  # simulates real image

import tensorflow as tf
import numpy as np
from PIL import Image

# 👇 1. Load an image (can be from file, camera, anything)
image = Image.open("your_sketch_or_input_image.jpg").convert("RGB")

# 👇 2. Resize (Pix2Pix expects 256x256 or 128x128 depending on dataset)
image = image.resize((256, 256))

# 👇 3. Convert to NumPy array
image_np = np.array(image).astype(np.float32)

# 👇 4. Normalize to [-1, 1] as expected by Pix2Pix Generator
image_np = (image_np / 127.5) - 1.0

# 👇 5. Add batch dimension: shape becomes (1, 256, 256, 3)
input_image = np.expand_dims(image_np, axis=0)

# ✅ Now you can feed it into the Generator!

import tensorflow as tf

def downsample(filters, size, apply_batchnorm=True):
    initializer = tf.random_normal_initializer(0., 0.02)

    block = tf.keras.Sequential()
    block.add(tf.keras.layers.Conv2D(filters, size, strides=2, padding='same',
                                     kernel_initializer=initializer,
                                     use_bias=not apply_batchnorm))

    if apply_batchnorm:
        block.add(tf.keras.layers.BatchNormalization())

    block.add(tf.keras.layers.LeakyReLU())

    return block
# 👇 Input shape: (None, 256, 256, 3)
inputs = tf.keras.layers.Input(shape=[256, 256, 3])

# 👇 Encoder blocks (Downsampling)
down_stack = [
    downsample(64, 4, apply_batchnorm=False),  # (bs, 128, 128, 64)
    downsample(128, 4),                        # (bs, 64, 64, 128)
    downsample(256, 4),                        # (bs, 32, 32, 256)
    downsample(512, 4),                        # (bs, 16, 16, 512)
    downsample(512, 4),                        # (bs, 8, 8, 512)
    downsample(512, 4),                        # (bs, 4, 4, 512)
    downsample(512, 4),                        # (bs, 2, 2, 512)
    downsample(512, 4),                        # (bs, 1, 1, 512)
]
x = inputs
skips = []  # store skip connections

for down in down_stack:
    x = down(x)
    skips.append(x)

# ✅ Output: x is bottleneck (1, 1, 512)
# ✅ Skips used later in decoder

def upsample(filters, size, apply_dropout=False):
    initializer = tf.random_normal_initializer(0., 0.02)
    block = tf.keras.Sequential()
    block.add(tf.keras.layers.Conv2DTranspose(filters, size, strides=2, padding='same',
                                              kernel_initializer=initializer,
                                              use_bias=False))
    block.add(tf.keras.layers.BatchNormalization())

    if apply_dropout:
        block.add(tf.keras.layers.Dropout(0.5))  # only in early decoder layers

    block.add(tf.keras.layers.ReLU())
    return block

# 👇 Decoder blocks (upsample)
up_stack = [
    upsample(512, 4, apply_dropout=True),  # (bs, 2, 2, 1024)  ← skip
    upsample(512, 4, apply_dropout=True),  # (bs, 4, 4, 1024)
    upsample(512, 4, apply_dropout=True),  # (bs, 8, 8, 1024)
    upsample(512, 4),                      # (bs, 16, 16, 1024)
    upsample(256, 4),                      # (bs, 32, 32, 512)
    upsample(128, 4),                      # (bs, 64, 64, 256)
    upsample(64, 4),                       # (bs, 128, 128, 128)
]

# Remember: last encoder output (bottleneck) is 'x'
# And skips is a list of encoder outputs

skips = reversed(skips[:-1])  # skip last one, already in x

for up, skip in zip(up_stack, skips):
    x = up(x)
    x = tf.keras.layers.Concatenate()([x, skip])  # 👈 UNET skip connection

# Final layer: 3-channel RGB output image
last = tf.keras.layers.Conv2DTranspose(3, 4, strides=2,
                                       padding='same',
                                       kernel_initializer=tf.random_normal_initializer(0., 0.02),
                                       activation='tanh')  # output between [-1, 1]

x = last(x)

generator = tf.keras.Model(inputs=inputs, outputs=x)
generator.summary()

# BinaryCrossentropy loss: fool the discriminator
adv_loss = loss_obj(tf.ones_like(fake_output), fake_output)

# L1 loss: make G(x) close to real y (for pixel-level quality)
l1_loss = tf.reduce_mean(tf.abs(target_image - generated_image))

# Combine both losses
gen_loss = adv_loss + (LAMBDA * l1_loss)
loss_obj = tf.keras.losses.BinaryCrossentropy(from_logits=True)

LAMBDA = 100

def generator_loss(disc_generated_output, gen_output, target):
    adv_loss = loss_obj(tf.ones_like(disc_generated_output), disc_generated_output)
    l1_loss = tf.reduce_mean(tf.abs(target - gen_output))
    total_gen_loss = adv_loss + (LAMBDA * l1_loss)
    return total_gen_loss
generator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)
@tf.function


    return gen_loss

loss_obj = tf.keras.losses.BinaryCrossentropy(from_logits=True)

def discriminator_loss(real_output, fake_output):
    real_loss = loss_obj(tf.ones_like(real_output), real_output)
    fake_loss = loss_obj(tf.zeros_like(fake_output), fake_output)
    total_disc_loss = real_loss + fake_loss
    return total_disc_loss

discriminator_optimizer = tf.keras.optimizers.Adam(2e-4, beta_1=0.5)
@tf.function
def train_step(input_image, target):
    with tf.GradientTape() as gen_tape, tf.GradientTape() as disc_tape:
        # Forward pass
        gen_output = generator(input_image, training=True)

        # Discriminator outputs
        disc_real_output = discriminator([input_image, target], training=True)
        disc_fake_output = discriminator([input_image, gen_output], training=True)

        # Losses
        gen_loss = generator_loss(disc_fake_output, gen_output, target)
        disc_loss = discriminator_loss(disc_real_output, disc_fake_output)

    # 🔁 Backprop Generator
    gen_gradients = gen_tape.gradient(gen_loss, generator.trainable_variables)
    generator_optimizer.apply_gradients(zip(gen_gradients, generator.trainable_variables))

    # 🔁 Backprop Discriminator
    disc_gradients = disc_tape.gradient(disc_loss, discriminator.trainable_variables)
    discriminator_optimizer.apply_gradients(zip(disc_gradients, discriminator.trainable_variables))

    return gen_loss, disc_loss